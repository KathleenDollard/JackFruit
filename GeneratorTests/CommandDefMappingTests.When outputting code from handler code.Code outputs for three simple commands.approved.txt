using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.Threading.Tasks;
namespace GeneratedHandlers
{
   public class ACommandWrapper
   {
      private Action _operation
      private Command _command
      public ACommandWrapper(Action operation)
      {
         _operation = operation;
      }
      public Command Command
      {
         get
         {
            if (_command == null)
            {
               _command = new Command("A");
               _command.Handler = new GeneratedHandler(_operation);
            }
            return _command;
         }
         set
         {
         }
      }
      private class GeneratedHandler : ICommandHandler
      {
         public GeneratedHandler(Action operation)
         {
            _operation = operation;
         }
         private Action _operation
         public Task<int> InvokeAsync(InvocationContext context)
         {
            _operation.Invoke();
            return Task.FromResult(context.ExitCode);
         }
      }
   }
   public class BCommandWrapper
   {
      private Action _operation
      private Command _command
      public BCommandWrapper(Action operation)
      {
         _operation = operation;
      }
      public Command Command
      {
         get
         {
            if (_command == null)
            {
               _command = new Command("B");
               _command.Handler = new GeneratedHandler(_operation);
            }
            return _command;
         }
         set
         {
         }
      }
      private class GeneratedHandler : ICommandHandler
      {
         public GeneratedHandler(Action operation)
         {
            _operation = operation;
         }
         private Action _operation
         public Task<int> InvokeAsync(InvocationContext context)
         {
            _operation.Invoke();
            return Task.FromResult(context.ExitCode);
         }
      }
   }
   public class CCommandWrapper
   {
      private Action _operation
      private Command _command
      public CCommandWrapper(Action operation)
      {
         _operation = operation;
      }
      public Command Command
      {
         get
         {
            if (_command == null)
            {
               _command = new Command("C");
               _command.Handler = new GeneratedHandler(_operation);
            }
            return _command;
         }
         set
         {
         }
      }
      private class GeneratedHandler : ICommandHandler
      {
         public GeneratedHandler(Action operation)
         {
            _operation = operation;
         }
         private Action _operation
         public Task<int> InvokeAsync(InvocationContext context)
         {
            _operation.Invoke();
            return Task.FromResult(context.ExitCode);
         }
      }
   }
}

using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.Threading.Tasks;
using CliApp;
namespace CliDefinition
{
   
   public class OriginalSeriesApp : AppBase
   {
      private OriginalSeriesCli rootCommand
      public OriginalSeries RootCommand
      {
         get
         {
            return rootCommand;
         }
      }
      public OriginalSeries CreateWithRootCommand(Delegate codeToRun)
      {
         return new OriginalSeries();
      }
   }
   
   public class OriginalSeriesCli : ICommandHandler
   {
      public Command Command {get; set;}
      public OriginalSeriesCli()
      {
         Command = new Command("OriginalSeries");
         kirkOption = new Option<string>("kirk");
         Command.Add(kirkOption);
         spockOption = new Option<string>("spock");
         Command.Add(spockOption);
         uhuraOption = new Option<string>("uhura");
         Command.Add(uhuraOption);
         Command.Handler = this;
      }
      public Option<string> kirkOption {get; set;}
      public string kirkOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(kirkOption);
      }
      public Option<string> spockOption {get; set;}
      public string spockOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(spockOption);
      }
      public Option<string> uhuraOption {get; set;}
      public string uhuraOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(uhuraOption);
      }
      public CommandBase NextGeneration {get; set;}
      public Task<int> InvokeAsync()
      {
         OriginalSeries(kirkOptionResult(context), spockOptionResult(context), uhuraOptionResult(context));
         return Task.FromResult(context.ExitCode);
      }
   }
   
   public class NextGenerationCli : ICommandHandler
   {
      public Command Command {get; set;}
      public NextGenerationCli()
      {
         Command = new Command("NextGeneration");
         picardOption = new Option<string>("picard");
         Command.Add(picardOption);
         Command.Handler = this;
      }
      public Option<string> picardOption {get; set;}
      public string picardOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(picardOption);
      }
      public CommandBase Voyager {get; set;}
      public Task<int> InvokeAsync()
      {
         NextGeneration(picardOptionResult(context));
         return Task.FromResult(context.ExitCode);
      }
   }
   
   public class VoyagerCli : ICommandHandler
   {
      public Command Command {get; set;}
      public VoyagerCli()
      {
         Command = new Command("Voyager");
         janewayOption = new Option<string>("janeway");
         Command.Add(janewayOption);
         chakotayOption = new Option<string>("chakotay");
         Command.Add(chakotayOption);
         torresOption = new Option<string>("torres");
         Command.Add(torresOption);
         tuvokOption = new Option<bool>("tuvok");
         Command.Add(tuvokOption);
         sevenOfNineOption = new Option<string>("sevenOfNine");
         Command.Add(sevenOfNineOption);
         Command.Handler = this;
      }
      public Option<string> janewayOption {get; set;}
      public string janewayOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(janewayOption);
      }
      public Option<string> chakotayOption {get; set;}
      public string chakotayOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(chakotayOption);
      }
      public Option<string> torresOption {get; set;}
      public string torresOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(torresOption);
      }
      public Option<bool> tuvokOption {get; set;}
      public bool tuvokOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "bool">(tuvokOption);
      }
      public Option<string> sevenOfNineOption {get; set;}
      public string sevenOfNineOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(sevenOfNineOption);
      }
      public Task<int> InvokeAsync()
      {
         Voyager(janewayOptionResult(context), chakotayOptionResult(context), torresOptionResult(context), tuvokOptionResult(context), sevenOfNineOptionResult(context));
         return Task.FromResult(context.ExitCode);
      }
   }
}

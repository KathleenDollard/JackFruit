using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.Threading.Tasks;
using CommandBase;
using CliApp;
namespace CliDefinition
{
   
   internal partial class OriginalSeriesApp : AppBase
   {
      private OriginalSeriesApp()
      {
      }
      public OriginalSeriesCommand RootCommand {get; set;}
      public static OriginalSeriesApp Create()
      {
         var newApp = new OriginalSeriesApp();
         newApp.RootCommand = OriginalSeriesCommand.Create();
         return newApp;
      }
   }
   
   public partial class OriginalSeriesCommand : CliRootCommand, ICommandHandler
   {
      private OriginalSeriesCommand()
      {
      }
      public static OriginalSeriesCommand Create()
      {
         var command = **Unknown<Generator.BuildNewerCliCodeModel+recurse@86-10>**;
         command.kirkOption = new Option<string>("kirk");
         command.Add(command.kirkOption);
         command.spockOption = new Option<string>("spock");
         command.Add(command.spockOption);
         command.uhuraOption = new Option<string>("uhura");
         command.Add(command.uhuraOption);
         OriginalSeriesCommand = **Unknown<Generator.BuildNewerCliCodeModel+recurse@96-17>**;
         command.Add(NextGenerationCommand);
         command.Handler = command;
         return command;
      }
      public Option<string> kirkOption {get; set;}
      public string kirkOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(kirkOption);
      }
      public Option<string> spockOption {get; set;}
      public string spockOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(spockOption);
      }
      public Option<string> uhuraOption {get; set;}
      public string uhuraOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(uhuraOption);
      }
      public CommandBase NextGeneration {get; set;}
      public Task<int> InvokeAsync()
      {
         OriginalSeries(kirkOptionResult(context), spockOptionResult(context), uhuraOptionResult(context));
         return Task.FromResult(context.ExitCode);
      }
   }
   
   public partial class NextGenerationCommand : CliRootCommand, ICommandHandler
   {
      private NextGenerationCommand()
      {
      }
      public static NextGenerationCommand Create()
      {
         var command = **Unknown<Generator.BuildNewerCliCodeModel+recurse@86-10>**;
         command.picardOption = new Option<string>("picard");
         command.Add(command.picardOption);
         NextGenerationCommand = **Unknown<Generator.BuildNewerCliCodeModel+recurse@96-17>**;
         command.Add(VoyagerCommand);
         command.Handler = command;
         return command;
      }
      public Option<string> picardOption {get; set;}
      public string picardOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(picardOption);
      }
      public CommandBase Voyager {get; set;}
      public Task<int> InvokeAsync()
      {
         NextGeneration(picardOptionResult(context));
         return Task.FromResult(context.ExitCode);
      }
   }
   
   public partial class VoyagerCommand : CliRootCommand, ICommandHandler
   {
      private VoyagerCommand()
      {
      }
      public static VoyagerCommand Create()
      {
         var command = **Unknown<Generator.BuildNewerCliCodeModel+recurse@86-10>**;
         command.janewayOption = new Option<string>("janeway");
         command.Add(command.janewayOption);
         command.chakotayOption = new Option<string>("chakotay");
         command.Add(command.chakotayOption);
         command.torresOption = new Option<string>("torres");
         command.Add(command.torresOption);
         command.tuvokOption = new Option<bool>("tuvok");
         command.Add(command.tuvokOption);
         command.sevenOfNineOption = new Option<string>("sevenOfNine");
         command.Add(command.sevenOfNineOption);
         command.Handler = command;
         return command;
      }
      public Option<string> janewayOption {get; set;}
      public string janewayOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(janewayOption);
      }
      public Option<string> chakotayOption {get; set;}
      public string chakotayOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(chakotayOption);
      }
      public Option<string> torresOption {get; set;}
      public string torresOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(torresOption);
      }
      public Option<bool> tuvokOption {get; set;}
      public bool tuvokOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "bool">(tuvokOption);
      }
      public Option<string> sevenOfNineOption {get; set;}
      public string sevenOfNineOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(sevenOfNineOption);
      }
      public Task<int> InvokeAsync()
      {
         Voyager(janewayOptionResult(context), chakotayOptionResult(context), torresOptionResult(context), tuvokOptionResult(context), sevenOfNineOptionResult(context));
         return Task.FromResult(context.ExitCode);
      }
   }
}

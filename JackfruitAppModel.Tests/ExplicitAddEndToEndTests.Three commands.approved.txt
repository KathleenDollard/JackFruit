using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.Threading.Tasks;
namespace CliDefinition
{
   
   public class Cli : ICommandHandler
   {
      private Action<string, string, string> _operation {get; set;}
      public Command Command {get; set;}
      public Cli(Action<string, string, string> operation)
      {
         _operation = operation;
         Command = new Command("");
         kirkOption = new Option<string>("kirk");
         Command.Add(kirkOption);
         spockOption = new Option<string>("spock");
         Command.Add(spockOption);
         uhuraOption = new Option<string>("uhura");
         Command.Add(uhuraOption);
         Command.Handler = this;
      }
      public Option<string> kirkOption {get; set;}
      public string kirkOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(kirkOption);
      }
      public Option<string> spockOption {get; set;}
      public string spockOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(spockOption);
      }
      public Option<string> uhuraOption {get; set;}
      public string uhuraOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<SimpleNamedItem "string">(uhuraOption);
      }
      public Task<int> InvokeAsync()
      {
         ._operation(.kirkOptionResult(context), .spockOptionResult(context), .uhuraOptionResult(context));
         return Task.FromResult(context.ExitCode);
      }
   }
}
